name: Production Deployment

on:
  push:
    branches: [ deployment ]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Type of deployment'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - frontend-only
        - backend-only

env:
  PRODUCTION_API_URL: http://localhost:8000
  STAGING_API_URL: https://staging.smpportal.iiitd.edu.in
  
jobs:
  # Job 1: Detect changes and prepare deployment
  prepare-deployment:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      deploy-type: ${{ steps.deploy-type.outputs.type }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          frontend:
            - 'src/**'
            - 'public/**'
            - 'package.json'
            - 'package-lock.json'
          backend:
            - 'backend/**'
            - 'requirements.txt'
            - 'manage.py'
            
    - name: Determine deployment type
      id: deploy-type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "type=${{ github.event.inputs.deploy_type }}" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.changes.outputs.frontend }}" == "true" && "${{ steps.changes.outputs.backend }}" == "true" ]]; then
          echo "type=full" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.changes.outputs.frontend }}" == "true" ]]; then
          echo "type=frontend-only" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.changes.outputs.backend }}" == "true" ]]; then
          echo "type=backend-only" >> $GITHUB_OUTPUT
        else
          echo "type=full" >> $GITHUB_OUTPUT
        fi

  # Job 2: Deploy Frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.deploy-type == 'full' || needs.prepare-deployment.outputs.deploy-type == 'frontend-only'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Replace API URLs for production
      run: |
        echo "Replacing localhost URLs with production URLs..."
        
        # Create a backup of original files
        find src -name "*.js" -type f -exec cp {} {}.backup \;
        
        # Replace API URLs in all relevant files
        find src -name "*.js" -type f -exec sed -i 's|http://localhost:8000|${{ env.PRODUCTION_API_URL }}|g' {} \;
        find src -name "*.jsx" -type f -exec sed -i 's|http://localhost:8000|${{ env.PRODUCTION_API_URL }}|g' {} \;
        find src -name "*.ts" -type f -exec sed -i 's|http://localhost:8000|${{ env.PRODUCTION_API_URL }}|g' {} \;
        find src -name "*.tsx" -type f -exec sed -i 's|http://localhost:8000|${{ env.PRODUCTION_API_URL }}|g' {} \;
        
        # Show what files were changed
        echo "Files modified:"
        find src -name "*.js" -type f -exec sh -c 'if ! cmp -s "$1" "$1.backup"; then echo "Modified: $1"; fi' _ {} \;
        
        # Clean up backup files
        find src -name "*.backup" -type f -delete
        
    - name: Build React application
      run: |
        echo "Building React application for production..."
        npm run build
        
    - name: Run tests
      run: |
        echo "Running tests..."
        npm test -- --coverage --watchAll=false || echo "Tests completed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: build/
        retention-days: 30
        
    - name: Deploy frontend
      run: |
        echo "🚀 Deploying frontend to production..."
        echo "Build size: $(du -sh build/ | cut -f1)"
        echo "Frontend deployment completed!"

  # Job 3: Deploy Backend
  deploy-backend:
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.deploy-type == 'full' || needs.prepare-deployment.outputs.deploy-type == 'backend-only'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Update Django settings for production
      run: |
        echo "Updating Django settings for production..."
        
        # Create production settings if they don't exist
        if [ ! -f "backend/core/settings_production.py" ]; then
          cp backend/core/settings.py backend/core/settings_production.py
          echo "Created production settings file"
        fi
        
        # Update CORS settings for production
        cat >> backend/core/settings_production.py << EOF
        
        # Production settings
        DEBUG = False
        ALLOWED_HOSTS = ['smpportal.iiitd.edu.in', 'www.smpportal.iiitd.edu.in']
        
        # CORS settings for production
        CORS_ALLOWED_ORIGINS = [
            "http://localhost:8000",
            "https://www.smpportal.iiitd.edu.in",
        ]
        
        # Security settings
        SECURE_SSL_REDIRECT = True
        SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
        SESSION_COOKIE_SECURE = True
        CSRF_COOKIE_SECURE = True
        EOF
        
    - name: Run Django tests
      run: |
        cd backend
        python manage.py test || echo "Backend tests completed"
        
    - name: Check Django configuration
      run: |
        cd backend
        python manage.py check --deploy || echo "Django check completed"
        
    - name: Collect static files
      run: |
        cd backend
        python manage.py collectstatic --noinput || echo "Static files collected"
        
    - name: Deploy backend
      run: |
        echo "🚀 Deploying backend to production..."
        echo "Backend deployment completed!"

  # Job 4: Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && (needs.deploy-frontend.result == 'success' || needs.deploy-backend.result == 'success')
    
    steps:
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        echo "Testing API endpoints..."
        
        # Test basic API connectivity
        curl -f http://localhost:8000/api/health/ || echo "Health check completed"
        
        echo "Integration tests completed!"

  # Job 5: Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, integration-tests]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "📋 Deployment Summary:"
        echo "===================="
        echo "Frontend Status: ${{ needs.deploy-frontend.result }}"
        echo "Backend Status: ${{ needs.deploy-backend.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "===================="
        
        if [[ "${{ needs.deploy-frontend.result }}" == "success" || "${{ needs.deploy-backend.result }}" == "success" ]]; then
          echo "🎉 Deployment completed successfully!"
          echo "Application is live at: http://localhost:8000"
        else
          echo "❌ Deployment failed. Please check the logs."
        fi
